@page "/"
@using BlazorApp.Shared.DTO
@using System.Net
@using BlazorApp.Shared;

@inject HttpClient Http

<PageTitle>Orders page</PageTitle>

<p>INTUS test app.</p>

<div style="padding: 5px 8px; background-color: lightblue">
    <p>Login: <input disabled="@_authenticated" type="text" @bind-value="_loginModel.UserName" @bind-value:event="oninput" /></p>
    <p>Password: <input disabled="@_authenticated" type="password" @bind-value="_loginModel.Password" @bind-value:event="oninput" /></p>
    <p>Stay logged in <input disabled="@_authenticated" type="checkbox" @bind-value="_loginModel.RememberLogin" @bind-value:event="oninput" /></p>
    <button @onclick="async () => await LoginClicked()">@(_authenticated ? "Logout" : "Login")</button>
</div>

@if (_orders == null)
{
    <p><em>No data loaded</em></p>
}
else if (!_authenticated)
{
    <p><em>Not logged in</em></p>
}
else
{
    <div style="visibility:@(_authenticated ? "visible" : "hidden")">
        <p></p>

        <p><em>User roles: @(_userInfo?.Roles.Aggregate((n, m) => n = n + "," + m).Trim(','))</em></p>
        <p></p>

        <button @onclick="LoadAllData">Load all data</button>
        <p></p>

        <h1>Orders</h1>
        <table>
            <thead style="background-color: cornflowerblue">
                <tr>
                    <th></th>
                    <th>Id</th>
                    <th>Name</th>
                    <th>State</th>
                    <th>Windows count</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < _orders?.Count; i++)
                {
                    var item = _orders[i];
                    <tr @onclick="async () => await ClickedOrderRow(item.Id)" style=@(_selectedOrderId == item.Id ? "background-color: powderblue" : "background-color: white")>
                        <td>
                            <p><button style="background-color: chartreuse" @onclick="async () => await ClickedOrderUpdate(item.Id)">Update</button></p>
                        </td>
                        <td>
                            <p>@item.Id</p>
                        </td>
                        <td>
                            <p><input type="text" @bind-value="item.Name" @bind-value:event="oninput" /></p>
                        </td>
                        <td>
                            <p><input type="text" @bind-value="item.State" @bind-value:event="oninput" /></p>
                        </td>
                        <td>
                            <p>@item.Windows?.Count</p>
                        </td>
                        <td>
                            <p><button style="background-color: orangered " @onclick="async () => await ClickedOrderDelete(item.Id)">Delete</button></p>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button style="background-color: darkorange" @onclick="async () => await ClickedOrderAdd()">Add new order</button>
        <h1></h1>

        <h1>Windows</h1>
        <table>
            <thead style="background-color: cornflowerblue">
                <tr>
                    <th></th>
                    <th>Id</th>
                    <th>Name</th>
                    <th>Qty.</th>
                    <th>Elements count</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < _selectedWindows?.Count; i++)
                {
                    var item = _selectedWindows[i];
                    <tr @onclick="async () => await ClickedWindowRow(item.Id)" style=@(_selectedWindowId == item.Id ? "background-color: powderblue" : "background-color: white")>
                        <td>
                            <p><button style="background-color: chartreuse" @onclick="async () => await ClickedWindowUpdate(item.Id)">Update</button></p>
                        </td>
                        <td>
                            <p>@item.Id</p>
                        </td>
                        <td>
                            <p><input type="text" @bind-value="item.Name" @bind-value:event="oninput" /></p>
                        </td>
                        <td>
                            <p><input type="number" @bind-value="item.QuantityOfWindows" @bind-value:event="oninput" /></p>
                        </td>
                        <td>
                            <p>@item.TotalSubElements</p>
                        </td>
                        <td>
                            <p><button style="background-color: orangered" @onclick="async () => await ClickedWindowDelete(item.Id)">Delete</button></p>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button style="background-color: darkorange" @onclick="async () => await ClickedWindowAdd(_selectedOrderId)">Add new window</button>
        <h1></h1>

        <h1>SubElements</h1>
        <table>
            <thead style="background-color: cornflowerblue">
                <tr>
                    <th></th>
                    <th>Id</th>
                    <th>Element</th>
                    <th>Type</th>
                    <th>Width</th>
                    <th>Height</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @for (var i = 0; i < _selectedElements?.Count; i++)
                {
                    var item = _selectedElements[i];
                    <tr @onclick="async () => ClickedElementRow(item.Id)" style=@(_selectedElementId == item.Id ? "background-color: powderblue" : "background-color: white")>
                        <td>
                            <p><button style="background-color: chartreuse" @onclick="async () => await ClickedElementUpdate(item.Id)">Update</button></p>
                        </td>
                        <td>
                            <p>@item.Id</p>
                        </td>
                        <td>
                            <p><input type="text" @bind-value="item.Element" @bind-value:event="oninput" /></p>
                        </td>
                        <td>
                            <p><input type="text" @bind-value="item.Type" @bind-value:event="oninput" /></p>
                        </td>
                        <td>
                            <p><input type="number" @bind-value="item.Width" @bind-value:event="oninput" /></p>
                        </td>
                        <td>
                            <p><input type="number" @bind-value="item.Height" @bind-value:event="oninput" /></p>
                        </td>
                        <td>
                            <p><button style="background-color: orangered" @onclick="async () => await ClickedElementDelete(item.Id)">Delete</button></p>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button style="background-color: darkorange" @onclick="async () => await ClickedElementAdd(_selectedWindowId)">Add new sub-element</button>
    </div>
}

@code {
    private LoginModel _loginModel = new LoginModel();
    private UserInfoModel? _userInfo = new UserInfoModel();
    private bool _authenticated = false;

    private List<OrderDto>? _orders;
    private List<WindowDto>? _selectedWindows = null;
    private List<SubElementDto>? _selectedElements = null;
    private int _selectedOrderId = -1;
    private int _selectedWindowId = -1;
    private int _selectedElementId = -1;

    protected override async Task OnInitializedAsync()
    {
        _userInfo = await Http.GetFromJsonAsync<UserInfoModel>($"/Authenticate/IsLoggedIn/");

        if (_userInfo != null)
        {
            _authenticated = true;
            _loginModel.UserName = _userInfo.UserName;
            _loginModel.RememberLogin = true;
            _orders = await GetOrders(string.Empty);
            _selectedOrderId = -1;
            _selectedWindowId = -1;
            _selectedElementId = -1;
        }
        else
        {
            _authenticated = false;
        }

        StateHasChanged();
    }

    private async Task LoginClicked()
    {
        if (_authenticated)
        {
            await Logout();
        }
        else
        {
            _userInfo = await Login(_loginModel);
            if (_userInfo != null)
                _loginModel.Password = string.Empty;
        }

        if (_authenticated)
        {
            _loginModel.Password = string.Empty;
            _selectedOrderId = -1;
            _selectedWindowId = -1;
            _selectedElementId = -1;
            _orders = await GetOrders(string.Empty);
        }
        else
        {
            _orders = null;
            _selectedWindows = null;
            _selectedElements = null;
        }

        StateHasChanged();
    }

    private async Task<UserInfoModel?> Login(LoginModel loginModel)
    {
        var result = await Http.PostAsJsonAsync<LoginModel>($"/Authenticate/Login/", loginModel);
        if (result.IsSuccessStatusCode)
        {
            _authenticated = true;
            _userInfo = await result.Content.ReadFromJsonAsync<UserInfoModel>();
        }
        else
        {
            _authenticated = false;
            _userInfo = null;
        }

        return _userInfo;
    }

    private async Task Logout()
    {
        var result = await Http.PostAsync($"/Authenticate/Logout/", null);
        if (result.IsSuccessStatusCode)
        {
            _authenticated = false;
        }
    }

    private async Task LoadAllData()
    {
        _orders?.Clear();
        _selectedWindows?.Clear();
        _selectedElements?.Clear();
        _orders = await GetOrders($"Include={nameof(OrderDto.Windows)}.{nameof(WindowDto.Elements)}");
        await ClickedOrderRow(1);
        StateHasChanged();
    }

    private async Task<List<OrderDto>?> GetOrders(string queryParameters)
    {
        List<OrderDto>? orders = null;
        try
        {
            orders = await Http.GetFromJsonAsync<List<OrderDto>>($"/api/Orders/GetByQuery?{queryParameters}");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }

        return orders;
    }

    // Element operations
    private void ClickedElementRow(int id)
    {
        var selectedItem = _selectedElements?.FirstOrDefault(n => n.Id == id);
        if (selectedItem != null)
        {
            _selectedElementId = id;
        }
        else
        {
            _selectedElementId = -1;
            // show error message
        }

        StateHasChanged();
    }

    private async Task ClickedElementAdd(int windowId)
    {
        if (windowId < 0)
            return;

        var item = new SubElementDto() { WindowId = windowId };
        var response = await Http.PostAsJsonAsync($"/api/SubElements/Create", item);

        if (response.StatusCode == HttpStatusCode.OK)
        {
            var newItem = await response.Content.ReadFromJsonAsync<SubElementDto>();
            if (newItem != null && newItem.Id > 0)
            {
                _selectedElements?.Add(newItem);
            }
            else
            {
                // show error message
            }
        }
        else
        {
            // show error message
        }

        StateHasChanged();
    }

    private async Task ClickedElementUpdate(int id)
    {
        var item = _selectedElements?.FirstOrDefault(n => n.Id == id);
        if (item != null)
        {
            var response = await Http.PutAsJsonAsync($"/api/SubElements/Update", item);
            if (response.StatusCode == HttpStatusCode.OK)
            {
                var newItem = await response.Content.ReadFromJsonAsync<SubElementDto>();
            }
            else
            {
                var oldItem = await Http.GetFromJsonAsync<SubElementDto>($"/api/SubElements/GetById/{id}");
                if (oldItem != null)
                {
                    item.Type = oldItem.Type;
                    item.Element = oldItem.Element;
                    item.Height = oldItem.Height;
                    item.Width = oldItem.Width;
                }
                // mark row with red color
            }

            StateHasChanged();
        }
    }

    private async Task ClickedElementDelete(int id)
    {
        var item = _selectedElements?.FirstOrDefault(n => n.Id == id);
        if (item != null)
        {
            var response = await Http.DeleteAsync($"/api/SubElements/Delete/{id}");
            if (response.StatusCode == HttpStatusCode.OK)
            {
                _selectedElements?.Remove(item);
                _selectedElementId = -1;
                StateHasChanged();
            }
            else
            {
                // mark row with red color
            }
        }
    }

    // Window operations
    private async Task ClickedWindowRow(int id)
    {
        var selectedItem = _selectedWindows?.FirstOrDefault(n => n.Id == id);
        if (selectedItem != null)
        {
            try
            {
                if (selectedItem.Elements == null || !selectedItem.Elements.Any())
                    selectedItem.Elements = await Http.GetFromJsonAsync<List<SubElementDto>>(
                            $"/api/SubElements/GetByQuery?WindowId={id}");

                _selectedElements = selectedItem.Elements;
                _selectedWindowId = id;

                if (_selectedElements != null && _selectedElements.Any())
                    ClickedElementRow(_selectedElements.First().Id);
                else
                    _selectedElementId = -1;
            }
            catch (Exception e)
            {
                _selectedWindowId = -1;
                // show error message
            }
        }
        else
        {
            _selectedWindowId = -1;
            // show error message
        }

        StateHasChanged();
    }

    private async Task ClickedWindowAdd(int orderId)
    {
        if (orderId < 0)
            return;

        var item = new WindowDto { OrderId = orderId };
        var response = await Http.PostAsJsonAsync(
            $"/api/Windows/Create",
            item);

        if (response.StatusCode == HttpStatusCode.OK)
        {
            var newItem = await response.Content.ReadFromJsonAsync<WindowDto>();
            if (newItem != null && newItem.Id > 0)
            {
                _selectedWindows?.Add(newItem);
                await ClickedWindowRow(newItem.Id);
            }
            else
            {
                // show error message
            }
        }
        else
        {
            // show error message
        }

        StateHasChanged();
    }

    private async Task ClickedWindowUpdate(int id)
    {
        var item = _selectedWindows?.FirstOrDefault(n => n.Id == id);
        if (item != null)
        {
            var response = await Http.PutAsJsonAsync($"/api/Windows/Update", item);
            if (response.StatusCode == HttpStatusCode.OK)
            {
                var newItem = await response.Content.ReadFromJsonAsync<WindowDto>();
            }
            else
            {
                var oldItem = await Http.GetFromJsonAsync<WindowDto>($"/api/Windows/GetById/{id}");
                if (oldItem != null)
                {
                    item.Name = oldItem.Name;
                    item.OrderId = oldItem.OrderId;
                    item.QuantityOfWindows = oldItem.QuantityOfWindows;
                }
                // mark row with red color
            }

            StateHasChanged();
        }
    }

    private async Task ClickedWindowDelete(int id)
    {
        var item = _selectedWindows?.FirstOrDefault(n => n.Id == id);
        if (item != null)
        {
            var response = await Http.DeleteAsync($"/api/Windows/Delete/{id}");

            if (response.StatusCode == HttpStatusCode.OK)
            {
                _selectedWindows?.Remove(item);
                _selectedWindowId = -1;
                StateHasChanged();
            }
            else
            {
                // mark row with red color
            }
        }
    }

    // Order operations
    private async Task ClickedOrderRow(int id)
    {
        var selectedItem = _orders?.FirstOrDefault(n => n.Id == id);
        if (selectedItem != null)
        {
            try
            {
                if (selectedItem.Windows == null || !selectedItem.Windows.Any())
                    selectedItem.Windows = await Http.GetFromJsonAsync<List<WindowDto>>(
                            $"/api/Windows/GetByQuery?OrderId={id}");

                _selectedWindows = selectedItem.Windows;
                _selectedOrderId = id;

                if (_selectedWindows != null && _selectedWindows.Any())
                    await ClickedWindowRow(_selectedWindows.First().Id);
                else
                    _selectedWindowId = -1;
            }
            catch (Exception e)
            {
                _selectedOrderId = -1;
                // show error message
            }
        }
        else
        {
            _selectedOrderId = -1;
            // show error message
        }

        StateHasChanged();
    }

    private async Task ClickedOrderAdd()
    {
        var item = new OrderDto();
        var response = await Http.PostAsJsonAsync(
            $"/api/Orders/Create",
            item);

        if (response.StatusCode == HttpStatusCode.OK)
        {
            var newItem = await response.Content.ReadFromJsonAsync<OrderDto>();
            if (newItem != null && newItem.Id > 0)
            {
                _orders?.Add(newItem);
                await ClickedOrderRow(newItem.Id);
            }
            else
            {
                // show error message
            }
        }
        else
        {
            // show error message
        }

        StateHasChanged();
    }

    private async Task ClickedOrderUpdate(int id)
    {
        var item = _orders?.FirstOrDefault(n => n.Id == id);
        if (item != null)
        {
            var response = await Http.PutAsJsonAsync($"/api/Orders/Update", item);
            if (response.StatusCode == HttpStatusCode.OK)
            {
                var newItem = await response.Content.ReadFromJsonAsync<OrderDto>();
            }
            else
            {
                var oldItem = await Http.GetFromJsonAsync<OrderDto>($"/api/Orders/GetById/{id}");
                if (oldItem != null)
                {
                    item.State = oldItem.State;
                    item.Name = oldItem.Name;
                }
                // mark row with red color
            }

            StateHasChanged();
        }
    }

    private async Task ClickedOrderDelete(int id)
    {
        var item = _orders?.FirstOrDefault(n => n.Id == id);
        if (item != null)
        {
            var response = await Http.DeleteAsync($"/api/Orders/Delete/{id}");

            if (response.StatusCode == HttpStatusCode.OK)
            {
                _orders?.Remove(item);
                _selectedOrderId = -1;
                StateHasChanged();
            }
            else
            {
                // mark row with red color
            }
        }
    }
}
